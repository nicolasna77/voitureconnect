generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["base", "dataCarFR", "dataCarEN"]
}

// ============= SCHÉMA BASE =============
model User {
  id                 String          @id @default(uuid())
  name               String
  email              String          @unique
  password           String?
  picture            String          @default("https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png")
  role               Role?           @default(USER)
  garages            Garage[]        @relation("GarageOwner")
  offers             Offer[]
  emailVerified      DateTime?
  buyerTransactions  Transaction[]   @relation("Buyer")
  sellerTransactions Transaction[]   @relation("Seller")
  Session            Session[]
  Ad                 Ad[]
  likes              Like[]
  Car                Car[]
  subscription       Subscription[]
  Authenticator      Authenticator[]
  Account            Account[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@schema("base")
}

enum Role {
  ADMIN
  USER
  PRO

  @@schema("base")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("base")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("base")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("base")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("base")
}

model Address {
  id      String   @id @default(uuid())
  street  String
  city    String
  state   String
  zip     String
  country String
  Garage  Garage[]
  Ad      Ad[]

  @@schema("base")
}

model Garage {
  id           String   @id @default(uuid())
  name         String
  AdresseId    String
  image        String?
  backgroundId String?
  background   Picture? @relation(fields: [backgroundId], references: [id])
  Adresse      Address  @relation(fields: [AdresseId], references: [id])
  phone        String
  ownerId      String
  owner        User     @relation("GarageOwner", fields: [ownerId], references: [id])
  adID         Ad[]
  cars         Car[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@schema("base")
}

model Ad {
  id          String   @id @default(uuid())
  carId       String   @unique
  car         Car      @relation(fields: [carId], references: [id])
  garageId    String?
  title       String
  description String
  garage      Garage?  @relation(fields: [garageId], references: [id])
  offers      Offer[]
  address     Address? @relation(fields: [addressId], references: [id])
  addressId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  likes       Like[]
  Option      Option[]

  @@schema("base")
}

model Option {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ad        Ad?      @relation(fields: [adId], references: [id])
  adId      String?
  Car       Car?     @relation(fields: [carId], references: [id])
  carId     String?

  @@schema("base")
}

model Offer {
  id          String       @id @default(uuid())
  adId        String
  userId      String
  offerAmount Decimal
  status      String
  ad          Ad           @relation(fields: [adId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Transaction Transaction?

  @@schema("base")
}

model Transaction {
  id        String   @id @default(uuid())
  offerId   String   @unique
  buyerId   String
  sellerId  String
  amount    Decimal
  status    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  buyer     User     @relation("Buyer", fields: [buyerId], references: [id])
  seller    User     @relation("Seller", fields: [sellerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("base")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  adId      String
  user      User     @relation(fields: [userId], references: [id])
  ad        Ad       @relation(fields: [adId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, adId])
  @@schema("base")
}

model Car {
  id        String    @id @default(uuid())
  userId    String
  Kms       Int
  price     Decimal
  year      Int
  color     String
  pictureId String?
  pictures  Picture[]
  fuelType  String
  vin       String    @unique
  optionsID String[]
  Option    Option[]
  gearbox   String
  user      User      @relation(fields: [userId], references: [id])
  garage    Garage?   @relation(fields: [garageId], references: [id])
  garageId  String?
  Ad        Ad?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations avec les données de référence (une seule relation par type)
  carType       CarTypeFR?       @relation("CarToCarTypeFR", fields: [carTypeId], references: [id_car_type], map: "Car_carTypeId_FR_fkey")
  carMake       CarMakeFR?       @relation("CarToCarMakeFR", fields: [carMakeId], references: [id_car_make], map: "Car_carMakeId_FR_fkey")
  carModel      CarModelFR?      @relation("CarToCarModelFR", fields: [carModelId], references: [id_car_model], map: "Car_carModelId_FR_fkey")
  carGeneration CarGenerationFR? @relation("CarToCarGenerationFR", fields: [carGenerationId], references: [id_car_generation], map: "Car_carGenerationId_FR_fkey")
  carSerie      CarSerieFR?      @relation("CarToCarSerieFR", fields: [carSerieId], references: [id_car_serie], map: "Car_carSerieId_FR_fkey")
  carTrim       CarTrimFR?       @relation("CarToCarTrimFR", fields: [carTrimId], references: [id_car_trim], map: "Car_carTrimId_FR_fkey_new")
  carEquipment  CarEquipmentFR?  @relation("CarToCarEquipmentFR", fields: [carEquipmentId], references: [id_car_equipment], map: "Car_carEquipmentId_FR_fkey_new")

  // Relations EN
  carTypeEN       CarTypeEN?       @relation("CarToCarTypeEN", fields: [carTypeId], references: [id_car_type], map: "Car_carTypeId_EN_fkey")
  carMakeEN       CarMakeEN?       @relation("CarToCarMakeEN", fields: [carMakeId], references: [id_car_make], map: "Car_carMakeId_EN_fkey")
  carModelEN      CarModelEN?      @relation("CarToCarModelEN", fields: [carModelId], references: [id_car_model], map: "Car_carModelId_EN_fkey")
  carGenerationEN CarGenerationEN? @relation("CarToCarGenerationEN", fields: [carGenerationId], references: [id_car_generation], map: "Car_carGenerationId_EN_fkey")
  carSerieEN      CarSerieEN?      @relation("CarToCarSerieEN", fields: [carSerieId], references: [id_car_serie], map: "Car_carSerieId_EN_fkey")
  carTrimEN       CarTrimEN?       @relation("CarToCarTrimEN", fields: [carTrimId], references: [id_car_trim], map: "Car_carTrimId_EN_fkey")
  carEquipmentEN  CarEquipmentEN?  @relation("CarToCarEquipmentEN", fields: [carEquipmentId], references: [id_car_equipment])

  // IDs des données de référence (avec contraintes)
  carTypeId       Int
  carMakeId       Int
  carModelId      Int
  carGenerationId Int
  carSerieId      Int
  carTrimId       Int
  carEquipmentId  Int

  @@index([carTypeId, carMakeId, carModelId]) // Ajout d'index pour améliorer les performances
  @@schema("base")
}

model Picture {
  id      String   @id @default(uuid())
  url     String
  alt     String
  isShown Boolean  @default(true)
  carId   String?
  car     Car?     @relation(fields: [carId], references: [id])
  Garage  Garage[]

  @@schema("base")
}

// ============= SCHÉMA FRANÇAIS =============
model CarTypeFR {
  id_car_type            Int                       @id @default(autoincrement())
  name                   String
  date_create            Int
  date_update            String?                   @default("NULL")
  carMakes               CarMakeFR[]
  carModels              CarModelFR[]
  carGenerations         CarGenerationFR[]
  carSeries              CarSerieFR[]
  carTrims               CarTrimFR[]
  carSpecifications      CarSpecificationFR[]
  carSpecificationValues CarSpecificationValueFR[]
  carOptions             CarOptionFR[]
  carOptionValues        CarOptionValueFR[]
  carEquipments          CarEquipmentFR[]
  cars                   Car[]                     @relation("CarToCarTypeFR")

  @@map("car_type")
  @@schema("dataCarFR")
}

model CarMakeFR {
  id_car_make Int       @id @default(autoincrement())
  id_car_type Int
  name        String
  date_create Int
  date_update String?   @default("NULL")
  cars        Car[]     @relation("CarToCarMakeFR")
  carType     CarTypeFR @relation(fields: [id_car_type], references: [id_car_type])

  carModels CarModelFR[]

  @@map("car_make")
  @@schema("dataCarFR")
}

model CarModelFR {
  id_car_model Int               @id @default(autoincrement())
  id_car_make  Int
  name         String
  date_create  Int
  date_update  String?           @default("NULL")
  id_car_type  Int
  carMake      CarMakeFR         @relation(fields: [id_car_make], references: [id_car_make])
  generations  CarGenerationFR[]
  series       CarSerieFR[]
  trims        CarTrimFR[]
  carType      CarTypeFR         @relation(fields: [id_car_type], references: [id_car_type])
  cars         Car[]             @relation("CarToCarModelFR")

  @@map("car_model")
  @@schema("dataCarFR")
}

model CarGenerationFR {
  id_car_generation Int          @id @default(autoincrement())
  id_car_model      Int
  id_car_type       Int
  name              String
  year_begin        String?      @default("NULL")
  year_end          String?      @default("NULL")
  date_update       String?      @default("NULL")
  date_create       Int
  carModel          CarModelFR   @relation(fields: [id_car_model], references: [id_car_model])
  carType           CarTypeFR    @relation(fields: [id_car_type], references: [id_car_type])
  series            CarSerieFR[]
  cars              Car[]        @relation("CarToCarGenerationFR")

  @@map("car_generation")
  @@schema("dataCarFR")
}

model CarSerieFR {
  id_car_serie      Int              @id @default(autoincrement())
  id_car_model      Int
  id_car_generation Int?
  id_car_type       Int
  name              String
  date_create       Int
  date_update       String?          @default("NULL")
  carModel          CarModelFR       @relation(fields: [id_car_model], references: [id_car_model])
  generation        CarGenerationFR? @relation(fields: [id_car_generation], references: [id_car_generation])
  carType           CarTypeFR        @relation(fields: [id_car_type], references: [id_car_type])
  trims             CarTrimFR[]
  cars              Car[]            @relation("CarToCarSerieFR")

  @@map("car_serie")
  @@schema("dataCarFR")
}

model CarTrimFR {
  id_car_trim           Int                       @id @default(autoincrement())
  id_car_serie          Int?
  id_car_model          Int
  id_car_type           Int
  name                  String
  start_production_year String?                   @default("NULL")
  end_production_year   String?                   @default("NULL")
  date_create           Int
  date_update           String?                   @default("NULL")
  carModel              CarModelFR                @relation(fields: [id_car_model], references: [id_car_model])
  carSerie              CarSerieFR?               @relation(fields: [id_car_serie], references: [id_car_serie])
  carType               CarTypeFR                 @relation(fields: [id_car_type], references: [id_car_type])
  equipments            CarEquipmentFR[]
  specifications        CarSpecificationValueFR[]
  cars                  Car[]                     @relation("CarToCarTrimFR")

  @@map("car_trim")
  @@schema("dataCarFR")
}

model CarEquipmentFR {
  id_car_equipment Int                @id @default(autoincrement())
  id_car_trim      Int
  name             String
  year             Int?
  date_create      Int
  date_update      String?            @default("NULL")
  id_car_type      Int
  carTrim          CarTrimFR          @relation(fields: [id_car_trim], references: [id_car_trim])
  optionValues     CarOptionValueFR[]
  carType          CarTypeFR          @relation(fields: [id_car_type], references: [id_car_type])
  cars             Car[]              @relation("CarToCarEquipmentFR")

  @@map("car_equipment")
  @@schema("dataCarFR")
}

model CarSpecificationFR {
  id_car_specification Int                       @id @default(autoincrement())
  name                 String
  id_parent            String?                   @default("NULL")
  date_create          Int
  date_update          String?                   @default("NULL")
  id_car_type          Int
  carType              CarTypeFR                 @relation(fields: [id_car_type], references: [id_car_type])
  specificationValues  CarSpecificationValueFR[]

  @@map("car_specification")
  @@schema("dataCarFR")
}

model CarSpecificationValueFR {
  id_car_specification_value Int                @id @default(autoincrement())
  id_car_specification       Int
  id_car_trim                Int
  value                      String
  unit                       String?            @default("NULL")
  date_create                Int
  date_update                String?            @default("NULL")
  id_car_type                Int
  carSpecification           CarSpecificationFR @relation(fields: [id_car_specification], references: [id_car_specification])
  carTrim                    CarTrimFR          @relation(fields: [id_car_trim], references: [id_car_trim])
  carType                    CarTypeFR          @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_specification_value")
  @@schema("dataCarFR")
}

model CarOptionFR {
  id_car_option Int                @id @default(autoincrement())
  name          String
  id_parent     String?            @default("NULL")
  date_create   Int
  date_update   String?            @default("NULL")
  id_car_type   Int
  optionValues  CarOptionValueFR[]
  carType       CarTypeFR          @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_option")
  @@schema("dataCarFR")
}

model CarOptionValueFR {
  id_car_option_value Int            @id @default(autoincrement())
  id_car_option       Int
  id_car_equipment    Int
  is_base             String?        @default("NULL")
  date_create         Int
  date_update         String?        @default("NULL")
  id_car_type         Int
  carOption           CarOptionFR    @relation(fields: [id_car_option], references: [id_car_option])
  carEquipment        CarEquipmentFR @relation(fields: [id_car_equipment], references: [id_car_equipment])
  carType             CarTypeFR      @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_option_value")
  @@schema("dataCarFR")
}

// ============= SCHÉMA ANGLAIS =============
// Mêmes modèles que le français avec suffixe EN
model CarTypeEN {
  id_car_type             Int                       @id @default(autoincrement())
  name                    String
  date_create             Int // Ajout du champ obligatoire
  date_update             String?                   @default("NULL")
  carModels               CarModelEN[]
  carMakes                CarMakeEN[] // Ajout de la relation avec CarMakeEN
  CarGenerationEN         CarGenerationEN[]
  CarSerieEN              CarSerieEN[]
  CarTrimEN               CarTrimEN[]
  CarEquipmentEN          CarEquipmentEN[]
  CarSpecificationEN      CarSpecificationEN[]
  CarSpecificationValueEN CarSpecificationValueEN[]
  CarOptionEN             CarOptionEN[]
  CarOptionValueEN        CarOptionValueEN[]
  cars                    Car[]                     @relation("CarToCarTypeEN")

  @@map("car_type")
  @@schema("dataCarEN")
}

model CarMakeEN {
  id_car_make Int       @id @default(autoincrement())
  name        String
  date_create Int
  date_update String?   @default("NULL")
  id_car_type Int
  carType     CarTypeEN @relation(fields: [id_car_type], references: [id_car_type])

  carModels CarModelEN[]
  cars      Car[]        @relation("CarToCarMakeEN")

  @@map("car_make")
  @@schema("dataCarEN")
}

model CarModelEN {
  id_car_model Int               @id @default(autoincrement())
  name         String
  date_create  Int
  date_update  String?           @default("NULL")
  id_car_make  Int
  id_car_type  Int
  carMake      CarMakeEN         @relation(fields: [id_car_make], references: [id_car_make])
  carType      CarTypeEN         @relation(fields: [id_car_type], references: [id_car_type])
  generations  CarGenerationEN[]
  series       CarSerieEN[]
  trims        CarTrimEN[]
  cars         Car[]             @relation("CarToCarModelEN")

  @@map("car_model")
  @@schema("dataCarEN")
}

model CarGenerationEN {
  id_car_generation Int          @id @default(autoincrement())
  id_car_model      Int
  id_car_type       Int
  name              String
  year_begin        String?      @default("NULL")
  year_end          String?      @default("NULL")
  date_update       String?      @default("NULL")
  date_create       Int
  carModel          CarModelEN   @relation(fields: [id_car_model], references: [id_car_model])
  carType           CarTypeEN    @relation(fields: [id_car_type], references: [id_car_type])
  series            CarSerieEN[]
  cars              Car[]        @relation("CarToCarGenerationEN")

  @@map("car_generation")
  @@schema("dataCarEN")
}

model CarSerieEN {
  id_car_serie      Int              @id @default(autoincrement())
  id_car_model      Int
  id_car_generation Int?
  id_car_type       Int
  name              String
  date_create       Int
  date_update       String?          @default("NULL")
  carModel          CarModelEN       @relation(fields: [id_car_model], references: [id_car_model])
  generation        CarGenerationEN? @relation(fields: [id_car_generation], references: [id_car_generation])
  trims             CarTrimEN[]
  carType           CarTypeEN        @relation(fields: [id_car_type], references: [id_car_type])
  cars              Car[]            @relation("CarToCarSerieEN")

  @@map("car_serie")
  @@schema("dataCarEN")
}

model CarTrimEN {
  id_car_trim           Int                       @id @default(autoincrement())
  id_car_serie          Int?
  id_car_model          Int
  id_car_type           Int
  name                  String
  start_production_year String?                   @default("NULL")
  end_production_year   String?                   @default("NULL")
  date_create           Int
  date_update           String?                   @default("NULL")
  carModel              CarModelEN                @relation(fields: [id_car_model], references: [id_car_model])
  carSerie              CarSerieEN?               @relation(fields: [id_car_serie], references: [id_car_serie])
  carType               CarTypeEN                 @relation(fields: [id_car_type], references: [id_car_type])
  equipments            CarEquipmentEN[]
  specifications        CarSpecificationValueEN[]
  cars                  Car[]                     @relation("CarToCarTrimEN")

  @@map("car_trim")
  @@schema("dataCarEN")
}

model CarEquipmentEN {
  id_car_equipment Int       @id @default(autoincrement())
  id_car_trim      Int
  name             String
  year             Int? // Changé de String? à Int?
  date_create      Int
  date_update      String?   @default("NULL")
  id_car_type      Int
  carTrim          CarTrimEN @relation(fields: [id_car_trim], references: [id_car_trim])
  carType          CarTypeEN @relation(fields: [id_car_type], references: [id_car_type])
  cars             Car[]     @relation("CarToCarEquipmentEN")

  carOptionValues CarOptionValueEN[]

  @@map("car_equipment")
  @@schema("dataCarEN")
}

model CarSpecificationEN {
  id_car_specification   Int                       @id @default(autoincrement())
  name                   String
  id_parent              String?                   @default("NULL")
  date_create            Int
  date_update            String?                   @default("NULL")
  id_car_type            Int
  carType                CarTypeEN                 @relation(fields: [id_car_type], references: [id_car_type])
  carSpecificationValues CarSpecificationValueEN[]

  @@map("car_specification")
  @@schema("dataCarEN")
}

model CarSpecificationValueEN {
  id_car_specification_value Int                @id @default(autoincrement())
  id_car_specification       Int
  id_car_trim                Int
  value                      String
  unit                       String?            @default("NULL")
  date_create                Int
  date_update                String?            @default("NULL")
  id_car_type                Int
  carSpecification           CarSpecificationEN @relation(fields: [id_car_specification], references: [id_car_specification])
  carTrim                    CarTrimEN          @relation(fields: [id_car_trim], references: [id_car_trim])
  carType                    CarTypeEN          @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_specification_value")
  @@schema("dataCarEN")
}

model CarOptionEN {
  id_car_option   Int                @id @default(autoincrement())
  name            String
  id_parent       String?            @default("NULL")
  date_create     Int
  date_update     String?            @default("NULL")
  id_car_type     Int
  carOptionValues CarOptionValueEN[]
  carType         CarTypeEN          @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_option")
  @@schema("dataCarEN")
}

model CarOptionValueEN {
  id_car_option_value Int            @id @default(autoincrement())
  id_car_option       Int
  id_car_equipment    Int
  is_base             String?        @default("NULL")
  date_create         Int
  date_update         String?        @default("NULL")
  id_car_type         Int
  carOption           CarOptionEN    @relation(fields: [id_car_option], references: [id_car_option])
  carEquipment        CarEquipmentEN @relation(fields: [id_car_equipment], references: [id_car_equipment])
  carType             CarTypeEN      @relation(fields: [id_car_type], references: [id_car_type])

  @@map("car_option_value")
  @@schema("dataCarEN")
}

enum SubscriptionPlan {
  BASIC
  PRO_STANDARD
  PRO_PREMIUM

  @@schema("base")
}

model Subscription {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    String
  startDate DateTime
  endDate   DateTime
  isAnnual  Boolean          @default(false)
  amount    Decimal
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("subscriptions")
  @@schema("base")
}
